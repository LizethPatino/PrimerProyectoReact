{"version":3,"sources":["logo.svg","components/TodoForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","TodoForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","title","responsible","description","priority","handleInputChange","bind","assertThisInitialized","handleSubmit","e","preventDefault","props","onAddTodo","setState","_e$target","target","value","name","defineProperty","react_default","a","createElement","className","onSubmit","type","onChange","placeholder","Component","App","toDo","handleAddTodo","todo","concat","toConsumableArray","index","filter","i","_this2","todos","map","elemento","key","onClick","removeTodo","href","length","components_TodoForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.43bcc5c9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from 'react';\r\n\r\n\r\nclass TodoForm extends Component {\r\n    constructor () {\r\n      super();\r\n      this.state = {\r\n        title: '',\r\n        responsible: '',\r\n        description: '',\r\n        priority: 'low'\r\n      };\r\n      this.handleInputChange = this.handleInputChange.bind(this);\r\n      this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n  \r\n    handleSubmit(e) {\r\n        //el evento prevent default evita que se refresque la página\r\n      e.preventDefault();\r\n      this.props.onAddTodo(this.state);\r\n      this.setState({\r\n        title: '',\r\n        responsible: '',\r\n        description: '',\r\n        priority: 'low'\r\n      });\r\n    }\r\n  \r\n    handleInputChange(e) {\r\n      const {value, name} = e.target;\r\n      this.setState({\r\n        [name]: value\r\n      });\r\n    }\r\n  \r\n    render() {\r\n      return (\r\n        <div className=\"card\">\r\n          <form onSubmit={this.handleSubmit} className=\"card-body\">\r\n            <div className=\"form-group\">\r\n              <input\r\n                type=\"text\"\r\n                name=\"title\"\r\n                className=\"form-control\"\r\n                value={this.state.title}\r\n                onChange={this.handleInputChange}\r\n                placeholder=\"Title\"\r\n                />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <input\r\n                type=\"text\"\r\n                name=\"responsible\"\r\n                className=\"form-control\"\r\n                value={this.state.responsible}\r\n                onChange={this.handleInputChange}\r\n                placeholder=\"Responsible\"\r\n                />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <input\r\n                type=\"text\"\r\n                name=\"description\"\r\n                className=\"form-control\"\r\n                value={this.state.description}\r\n                onChange={this.handleInputChange}\r\n                placeholder=\"Description\"\r\n                />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <select\r\n                  name=\"priority\"\r\n                  className=\"form-control\"\r\n                  value={this.state.priority}\r\n                  onChange={this.handleInputChange}\r\n                >\r\n                <option>low</option>\r\n                <option>medium</option>\r\n                <option>high</option>\r\n              </select>\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-primary\">\r\n              Save\r\n            </button>\r\n          </form>\r\n        </div>\r\n      )\r\n    }\r\n  \r\n  }\r\n\r\n  export default TodoForm;","import React, { Component } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport {toDo} from './toDo.json';\r\nimport TodoForm from './components/TodoForm';\r\n\r\n\r\n\r\nclass App extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state ={\r\n      //se añade con el toDo todo lo de toDo.json\r\n     toDo\r\n    };\r\n\r\n    //se referencia la funcion respecto a este componente\r\n    this.handleAddTodo = this.handleAddTodo.bind(this);\r\n  }\r\n\r\n  handleAddTodo(todo){\r\n    this.setState({\r\n      toDo:[...this.state.toDo, todo ]\r\n    })\r\n\r\n  }\r\n\r\n  removeTodo(index){\r\n    this.setState({\r\n      toDo: this.state.toDo.filter((e, i) => {\r\n        return i !== index\r\n     })\r\n    })\r\n  }\r\n\r\n\r\n  render() {\r\n  const todos =  this.state.toDo.map((elemento, i ) => {\r\n      return(\r\n       //el key sirve para identificar la identidad del elemento\r\n       <div className=\"col-md-4\" key={i}>\r\n          <div className=\"card mt-5\">\r\n            <div className=\"card-header\">\r\n                <h3>{elemento.title}</h3>\r\n                <span className=\"badge badge-pill badge-danger ml-2\">\r\n                  {elemento.priority}\r\n                </span>\r\n            </div>\r\n            <div className=\"card-body\">\r\n            <p>{elemento.description}</p>\r\n            <p><mark>{elemento.responsible}</mark></p>\r\n            </div>\r\n            <div className=\"card-footer\">\r\n              <button onClick= { this.removeTodo.bind(this, i)} className=\"btn btn-danger\">Delete</button>\r\n            </div>\r\n          </div>\r\n       </div>  \r\n      )\r\n    } )\r\n    return (\r\n      <div className=\"App\"> \r\n\r\n       <nav className=\"navbar navbar-dark bg-dark\">\r\n                <a href=\"\" className=\"text-white\" >Tasks\r\n                <span className=\"badge badge-pill badge-light ml-2\">\r\n                    {this.state.toDo.length}\r\n                </span>\r\n                </a>\r\n      </nav>  \r\n\r\n       <div className=\"container\">\r\n          <div className=\"row mt-5\">\r\n         <div className=\"col-md-4 text-center\">\r\n         <h3>AGREGA UNA TAREA:</h3>\r\n          <TodoForm  onAddTodo ={this.handleAddTodo}/>\r\n          </div>\r\n           \r\n        <div className=\"col-md-8\">\r\n          <div className=\"row\">\r\n        \r\n            {todos}\r\n          </div>\r\n        </div>\r\n      </div>\r\n     </div>\r\n    </div>  \r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}